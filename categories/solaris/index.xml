<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Solaris - Category - The Pensieve - Masoud Kalali&#39;s Blog</title>
        <link>https://kalali.blog/categories/solaris/</link>
        <description>Solaris - Category - The Pensieve - Masoud Kalali&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>kalali@gmail.com (Masoud Kalali)</managingEditor>
            <webMaster>kalali@gmail.com (Masoud Kalali)</webMaster><copyright>This work is licensed under a Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)</copyright><lastBuildDate>Wed, 12 Jan 2011 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://kalali.blog/categories/solaris/" rel="self" type="application/rss+xml" /><item>
    <title>Solaris fault administration using fmadm command</title>
    <link>https://kalali.blog/2011/01/solaris-fault-administration-using-fmadm-command/</link>
    <pubDate>Wed, 12 Jan 2011 00:00:00 &#43;0000</pubDate>
    <author>Masoud Kalali</author>
    <guid>https://kalali.blog/2011/01/solaris-fault-administration-using-fmadm-command/</guid>
    <description><![CDATA[In this article we will study how we can use the fmadm command to get the list of faulty components along with the detailed information about the fault. Before starting this article we should have a command console open and then we can proceed with using the fmadm command.Â The most basic form of using fmadm command is using its faulty subcommand as follow 1 \# fmadm faulty When we have no error in the system, this command will not show anything and exit normally but with a faulty component the output will be different, for example in the following sample we have a faulty ZFS pool because some of its underlying devices are missing.]]></description>
</item>
<item>
    <title>Monitoring ZFS pools performance using zpool iostat</title>
    <link>https://kalali.blog/2010/12/monitoring-zfs-pools-performance-using-zpool-iostat/</link>
    <pubDate>Thu, 30 Dec 2010 00:00:00 &#43;0000</pubDate>
    <author>Masoud Kalali</author>
    <guid>https://kalali.blog/2010/12/monitoring-zfs-pools-performance-using-zpool-iostat/</guid>
    <description><![CDATA[Performance, performance, performance; this is what we hear in all software development and management sessions. ZFS provides few utility commands to monitor one or more pools&rsquo; performance. You should remember that we used fsstat command to monitor the UFS performance metrics. We can use iostat subcommand of the zpool command to monitor the performance metrics of ZFS pools. The iostat subcommand provides some options and arguments which we can see in its syntax shown below: 1 iostat \[-v\] \[pool\] .]]></description>
</item>
<item>
    <title>Managing Logical network interfaces in Solaris</title>
    <link>https://kalali.blog/2010/12/managing-logical-network-interfaces-in-solaris/</link>
    <pubDate>Thu, 09 Dec 2010 00:00:00 &#43;0000</pubDate>
    <author>Masoud Kalali</author>
    <guid>https://kalali.blog/2010/12/managing-logical-network-interfaces-in-solaris/</guid>
    <description><![CDATA[Like other operating system we can assign multiple IP address to a network interface. This secondary address are called logical interfaces and we can use them to make one machine with one single network interface own multiple IP addresses for different purposes. We may need to assign multiple IP address to an interface to make it available to both internal and external networks or for testing purposes. We should have one network interface configured in our system in order to create additional logical interfaces.]]></description>
</item>
<item>
    <title>Configuring Solaris Link Aggregation (Ethernet bonding)</title>
    <link>https://kalali.blog/2010/11/configuring-solaris-link-aggregation-ethernet-bonding/</link>
    <pubDate>Thu, 25 Nov 2010 00:00:00 &#43;0000</pubDate>
    <author>Masoud Kalali</author>
    <guid>https://kalali.blog/2010/11/configuring-solaris-link-aggregation-ethernet-bonding/</guid>
    <description><![CDATA[Link aggregation or commonly known Ethernet bonding allows us to enhance the network availability and performance by combining multiple network interfaces together and form an aggregation of those interface_names which act as a single network interface with greatly enhanced availability and performance.
When we aggregate two or more network interfaces, we are forming a new network interface on top of those physical interfaces combined in the link layer.
We need to have at least two network interfaces in our machine to create a link aggregation.]]></description>
</item>
<item>
    <title>OpenSolaris File System Basics: Managing UFS and ZFS pools</title>
    <link>https://kalali.blog/2010/08/opensolaris-file-system-basics-managing-ufs-and-zfs-pools/</link>
    <pubDate>Mon, 09 Aug 2010 00:00:00 &#43;0000</pubDate>
    <author>Masoud Kalali</author>
    <guid>https://kalali.blog/2010/08/opensolaris-file-system-basics-managing-ufs-and-zfs-pools/</guid>
    <description><![CDATA[What is a file system File systems make it possible to store and retrieve files and containing data into storages like hard disks, optical disks and other types of storages.
OpenSolaris support both legacy file systems like UNIX File System (UFS) and its own file system called Zettabyte File System (ZFS). Following figure show how UFS and other legacy file systems work.
As you can see we can partition each storage device into one or more volumes with different file systems.]]></description>
</item>
<item>
    <title>Managing and Administrating OpenSolaris Zones</title>
    <link>https://kalali.blog/2010/07/managing-and-administrating-opensolaris-zones/</link>
    <pubDate>Mon, 12 Jul 2010 00:00:00 &#43;0000</pubDate>
    <author>Masoud Kalali</author>
    <guid>https://kalali.blog/2010/07/managing-and-administrating-opensolaris-zones/</guid>
    <description><![CDATA[Introduction The Solaris Zones provide us with kernel level virtualization allowing us to create multiple virtualized environments on top of the host system kernel. Each one of these virtualized environment is isolated from host and other virtualized environments despite running on the same Kernel which is provided by the host or global zone.
A typical example of using zones can be hosting different applications like the HTTP server, different application server instances for different applications, and the database server in separate zones.]]></description>
</item>
<item>
    <title>OpenSolaris Networking In Details</title>
    <link>https://kalali.blog/2010/07/opensolaris-networking-in-details/</link>
    <pubDate>Fri, 09 Jul 2010 00:00:00 &#43;0000</pubDate>
    <author>Masoud Kalali</author>
    <guid>https://kalali.blog/2010/07/opensolaris-networking-in-details/</guid>
    <description><![CDATA[Introduction In this chapter we are going to cover basic networking capabilities of OpenSolaris. While we will some of common utilities in the recipes, we will learn some more trivial ones here.
Learning netstat command The netstat command is well known for checking the active connections status in a system but it can provide a fair deal of other diagnostics. Following sample command shows some of the netstat use cases.]]></description>
</item>
<item>
    <title>Managing faults and services in OpenSolaris</title>
    <link>https://kalali.blog/2010/06/managing-faults-and-services-in-opensolaris/</link>
    <pubDate>Wed, 09 Jun 2010 00:00:00 &#43;0000</pubDate>
    <author>Masoud Kalali</author>
    <guid>https://kalali.blog/2010/06/managing-faults-and-services-in-opensolaris/</guid>
    <description><![CDATA[Introduction In this chapter we will cover fault and services administration and management. The fault management mostly deals with failing hardware components while service management and administration deals with software failures. A hardware failure is a faulty RAM module and a sample of failing service component is an HTTP server stopped functioning properly.
OpenSolaris is an enterprise operating system meaning that it should be resilient to both software and hardware failures and automatically recover from the failure and repair itself or in cases when it is not possible for the OS to repair and recover, it should notify some administrator to take action.]]></description>
</item>
<item>
    <title>In depth tutorial on managing ZFS Datasets</title>
    <link>https://kalali.blog/2010/05/managing-zfs-datasets/</link>
    <pubDate>Sun, 09 May 2010 00:00:00 &#43;0000</pubDate>
    <author>Masoud Kalali</author>
    <guid>https://kalali.blog/2010/05/managing-zfs-datasets/</guid>
    <description><![CDATA[Introduction ZFS pools provide us with the underlying storage with which we can create files and directories inside it right after we create it. But OpenSolaris and ZFS provides more than that by introducing ZFS datasets&hellip;
In this recipe we will work on top of a zfs pool named fpool and the default root pool named rpool. So before continuing on this recipe we should have a pool named fpool created.]]></description>
</item>
</channel>
</rss>
