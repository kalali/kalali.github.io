[{"categories":["Product Adoption"],"content":"Amount of information about hot new tech components is amazing. The hotter the topic or the framework the more information is scattered around the web for it. For example: Have you seen the plenty of use cases that every vendor in every segment of tech stack provide as part of the adoption or success story? How about the tutorial that shows how quickly and easily something as significant as a an observability solution can be set and be up and running? And many other medium that one way or another demo how easily a solution can be used/adopted. Existence of such case studies and tutorial is amazing contribution to the overall wealth of knowledge and understanding in the tech sphere, no doubt avbout it. Sometimes I see engineering team members speaking about adopting a new infrastructure component or a brand new CNCF project with estimations that are 1/20st of the realistic time that it would take to adopt such a solution into our infrastructure. Any of those can be an entry point for a team or organisation deciding to adopt something and then endup in the pink elephant. With the adoption takes longer and longer and at the end of the day the organisation endups with half baked integrations and a team or an individual who is in charge of maintaining something that is not ready for prime time but is in widespread use. If vendors and contributors that are writing quick tutorial can be more straight forward with the write-ups in relation to things like compliance, governance, automation, seamless integration, security, etc. that an organisation must take into account before thinking about adopting project/product XYZ. Over short term there might be fewer attempt at adopting new components, products and projects but in the long run there will be more success in the industry which hopefully make everyone happier. Consumer of tech products will be happier with bug free, and less breaches in the product they are using and the practitioners will be happier with better build and well thought IT ecosystem. On the other end of it, it may result in less experiments and thus less feedback to the product owners on how to improve or enhance different aspect of the product. From the rollout to the usability of it, it is a trade-off and a balance for sure. ","date":"2022-04-21","objectID":"/2022/04/impacts-of-a-few-in-depth-write-ups-and-an-abundance-of-getting-started/:0:0","tags":["Vendor","Case Study"],"title":"Impacts of a few in-depth write-ups and an abundance of getting started","uri":"/2022/04/impacts-of-a-few-in-depth-write-ups-and-an-abundance-of-getting-started/"},{"categories":["Platform Engineering"],"content":"Intro Building a new development platform, for example a new microservices oriented platform to replace an existing monolith software system, is a massive endeavour. I have been working on a development platform, the whole ecosystem from ways of working to pipeline in the past 3 years and the experience might help others. So I thought to write down some of the observation and experience before they fully turn into intrinsic/implicit knowledge and hard to pen. Platform? If we divide the software development within an organization into two very broad categories, there is platform development, and platform products in one layer and and application development in another, which is usually consumes the platform. The applications are usually customer/end-user facing or directly facilitating a particular business use-case, for example a login routine or a batch job that runs every night to process schedule payments. Applications most often have a clear business goal and defining OKRs is easier and ROI can be observed within a shorter period of time. On the other hand, platform development which can be anything from shared components for different applications to release pipelines, development tools, or combination of many things together is not as straight forward. Platforms and platform teams are there to not only save initial cost of starting a new project or product but to save on the cost of maintenance and owning such product but introducing familiar concepts and ways of working across the vertical and horizontal integration points. Sometimes a platform/team is hard to justify, not easy to have any meaningful OKRs and usually have no immediate ROI. For example, If the platform team develops a pipeline and related libraries, the adoption of such pipeline takes time. After a reasonable number of applications have started using the said pipeline, product owner would slowly see an indirect ROI from: Better compliance baked into the pipeline Automation in release practices rather than throw over the wall and hand overs Uniform quality gates as pipeline would enforce some level conde analysis and apply some gates Faster time to production as it reduces the number of manual steps and communication costs Less code sediment as continues or even frequent deployment reduces the code that is sitting in the codebase without being exercised Less regressions because of frequent small releases etc. That is when the justification for existence of a platform become easier and the platform teams and products will become necessities. Why Platforms? Simply put platforms help with the following: Time saving as they prevent inventing the same thing again and again; e.g. a pipeline. Time saving as, when done right, they introduce a consistent way of working across diferent layers. Being applications, infrastructure or tooling. That will in turn makes transfer of knowledge and understanding easier Time saving as teams with expertise build re-usable components that other team can incorporate rather than every time having to acquire such expertise Governance, and compliance and other orthogonal aspects can be addressed via automation backing variety of self services. Let’s say that there an enterprise with the very well established process for software development, delivery, operation and support. This has been the case for the past couple of decades and individuals, teams, organisational units, and organisation as a whole developed a culture around the development process (for good or bad). The process can be something along the line of the following for simple features/functionalities. Imagine a handover between most steps. Long contemplations and many meetings of the domain architect/s Retirement gathering and certifying it with stakeholders Doing any risk assessment, compliance check in relation to data being processed and/or collected Planning (usually includes capacity planning and schedule as well as development timeline) Development and figuring o","date":"2022-04-18","objectID":"/2022/04/effective-internal-platform-product-manager/:0:0","tags":["product owner","PM","platform engineering","microservices"],"title":"Building a development platform","uri":"/2022/04/effective-internal-platform-product-manager/"},{"categories":["Platform Engineering"],"content":"Setting up the expectations Being a product owner or an advocate for a platform requires more conversation and investigation about painpoints existing in the organization as a whole. Being the application/program development teams or the relationship between compliance/security/process divisions with the application development hierarchy. Setting clear expectations for external customers and goals for the platform team itself is an important task that the product owner, in combination with engineering teams (and management) should set. This expectation setting will make it clear to management on what timeline and outcome to expect for given organisational support, runway and budget. At the same time, a platform development team must make it clear to the management that having a platform is a tradeoff. For example if the current way of working is that each team entirely choose their guidelines and architectural patterns, a development platform may enforce certain principles and guidelines using automation as much as possible, so no exception and exemptions. An example can be use of certain libraries for logging, or certain pipeline for deployment, certain number of active engineers per application and so on. Platform adoption A development platform like any other product will need adoption and use to get the feedback cycle going. Let’s say that the platform teams understood the painpoints and the platform is developed to not only remedy the painpoints but also ensure the viability of the application ecosystem over the next decad. If the platform is not being used and has an established feedback cycle it will be hard for it to grow and cover the majority of use-cases or valid viewpoints. There are some general approach in spreading the adoption of the platform and starting a feedback cycle. Platform team owning applications One approach that I have employed, and seems to work for adoption of the platform, is ensuring the platform team owns some programs built on top of the platform. This service can be the example to showcase how platform works and how does it help with the pain-points that it exists to remedy and how does it propel the organisation into the new ways of working and tech landscape. Of course, platform owners developing applications has some drawbacks: The application/s may turn into a an unintended blueprint and others may follow something that is not fully baked yet. The platform team too far get into habit of optimising the platform for their own use/level of competence. The platform team get too far distracted by the application to pay attention to the platform itself. This may result in mental overload for the team and far too many context switching. Platform team helping an application team convert Another approach is locating a team that struggling the most and is vocal the most about the painpoints, of course within reason, and help them convert their service development to use the new platform. This would require multiple criteria: The service in question does not have too many dependencies that can impact the conversion The service team is willing to take the steps. The steps that the platform is advocating for. For example code review, use of pipeline, test automation and so on that is a service provided by the platform. The platform team has some understanding of the domain that the service team is driving. Combination of the above two One thing to consider in the combination or even in the second approach is to identify the players and influencers and get buy-in from them. In every organisation there are people who are sitting far behind the scene without any title with more influence on what different teams may adopt that any line managers. Convincing them will multiply the rate of adoption. Next In the next instalments of this series I will write more about each aspect of the development platform mentioned here. ","date":"2022-04-18","objectID":"/2022/04/effective-internal-platform-product-manager/:0:1","tags":["product owner","PM","platform engineering","microservices"],"title":"Building a development platform","uri":"/2022/04/effective-internal-platform-product-manager/"},{"categories":null,"content":"I work in software industry; and have been involved with software development since 2000. Delphi, .Net 1.1 and J2SE back in the time, and now I am more focused on Java and CNCF as ecosystem. My responsiblities are more in ensuring alignments, and with assisting organizations with tech strategy, architecture, adoption of new technologies and practices, planning and implementations where the are of impact is across organization boundaries. I like the thrill of innovating, building or rebuilding. I enjoy it because it is as giving existence to something that is not; being software engineering or small tinkering projects. I like outdoors, mountains, open land, I like water sports; and the prime of my activities is running, mountain running that is (I am not good at it). Masoud Kalali’s photo at Idre Fjällmaraton\" Masoud Kalali’s photo at Idre Fjällmaraton I use a split mechanical keyboard, works most times from my home office, grow cactus and other plants in my office to keep it green and more personal. One little guy in the garden\" One little guy in the garden I like writing, authored a book and co-authored another a decade ago. Whenever I get the chance I read books ranging from sci-fi and fantasy to leadership and management; every now and then I binge a bunch of articles or blogs that I have bookmarked to go through. Recently I revived this blog (Removed about 110 posts that were outdated) How to get in touch with me? If you wanted to talk to me about any of the blog post, or anything else for that matter, send me an email to my first name at kalali.blog. ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"About me, Masoud Kalali","uri":"/about/"}]