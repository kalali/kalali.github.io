[{"categories":["Agile Team"],"content":"What I have observed with successful teams is the trust and belief in the team's mission. Trust in the mission, baring some issues like ill-fitting team members, etc. is the single most important factor for success of an individual, a team or a team of teams.","date":"2022-05-03","objectID":"/2022/05/on-the-lack-of-merit-of-task-based-teams/","tags":["Leadership","Team Building","Velocity","Management"],"title":"Why not task based teams?","uri":"/2022/05/on-the-lack-of-merit-of-task-based-teams/"},{"categories":["Agile Team"],"content":"What I have learned about successful teams is the trust and the belief in the team’s mission. Trust in the mission, baring some issues like ill-fitting team members, etc. is the single most important factor for success of an individual, a team or a team of teams. When the group of individuals that are part of the said team cannot see a mission they trust, going through the famous steps of Forming, Storming, Norming, and Performing will be harder. The mission is what the team usually communicate and collaborate on. And effectively going through FSNP stages is possible with communication and collaboration. The communication and understanding that forms between team members is what makes the team reaching the performing stage and becoming what is called a high performing team. The concept of task oriented teams is floating around with different acronyms, one being the Quick Reaction Team, the miscellaneous teams, being project based team, fluid team, and so on. The whole concept behind it is a team that has no long history of having gone through the team formation and a long term strong mission to move toward to. It is usually working through a set of bugs and firefighting, or through disjoint projects that come into the pipeline. Setting up successful development teams is hard! It is not only because people are different but also because organizations vastly differ from one another and thus one recipe won’t work for everyone and everywhere. I tried setting up teams with a similar approach with some teams focused on long-term work that required more research and prototyping and a team dedicated to quicker gains for the system’s customers. The quicker gains include bugfix or features with smaller scopes and higher demands. The result was accumulated fatigue of never-ending context switching for the quick response team. Of course, there is always the gratifying feeling of what they have developed lands in so-called production but the feeling of accomplishment is not on par with the fatigue of the context switches. That was when I thought about rotating the team members between different teams with implications of time spent getting up to speed with the feature development and transfer of the knowledge context from the team member moving out of the feature development team and getting used to ways of working of the quick response team for the newly joined member. It is possible to have a pool of engineers working together on different areas of the same bounded context, as long as the members that are coming together have already gone through knowing one another as team. But to pull seemingly random engineers between different knowledge/context in a project based manner may result in developing a feature but it will not result in positive outcomes long term. ","date":"2022-05-03","objectID":"/2022/05/on-the-lack-of-merit-of-task-based-teams/:0:0","tags":["Leadership","Team Building","Velocity","Management"],"title":"Why not task based teams?","uri":"/2022/05/on-the-lack-of-merit-of-task-based-teams/"},{"categories":["Developer Experience"],"content":"When a new hire joins a team dealing with the development or sustaining of a large-scale application there are a few things that they would need to form a basic understanding of the system: Deeper understanding of what the business about Get a view of the system’s architecture for the software system and the deployment view. Get a bird’s eye view of the system’s dependencies. At least the immediate dependencies. History lessons, how the system came to be at the current state. Maybe ADRs would help with this. Learn about what are/were the push and pull resulted in the current state (Lack of maintenance, lack of test, long release cycles, well automated, etc.) Learn how to go through a development cycle of checking the code out, make a small fix/change, run the tests, go through the release cycle. In some organizations, these steps take months to complete. Or some of the above may not even be possible, because nobody knows the context of some decisions and some paths taken. It always pays off to make any onboarding as easy as it can get. Onboarding is a recurring cost like reading/changing. So if clean code matters, so should a clean onboarding. There are plenty of reasons for the first days of software developers starting a new job being less than ideal. From poor security onboarding to lack of a buddy to walk them through the day-to-day of work-life for the first few days. Details of that is a subject of another series of blog posts ","date":"2022-04-26","objectID":"/2022/04/onboarding-as-important-as-code-readablity/:0:0","tags":["Team","architecture","Onboarding","Documentation","Developer Experience"],"title":"Smooth Developer Onboarding is as Important as Code Readability","uri":"/2022/04/onboarding-as-important-as-code-readablity/"},{"categories":["Architecture"],"content":"During the past 20 years I have seen trends come and go; one of the thing that has stayed around in one or another form is the term architecture and the  architect role. Of course, there are plenty of overloads for the term and plenty of architect archetype like domain architect, enterprise architects, IT architect, network architect, software architect and you name it.","date":"2022-04-19","objectID":"/2022/04/few-tips-for-more-success-with-architecture-description/","tags":["Architecture","Documentation"],"title":"Few tips for more success with architecture description","uri":"/2022/04/few-tips-for-more-success-with-architecture-description/"},{"categories":["Architecture"],"content":"Introduction During the past 20 years I have seen trends come and go; one of the thing that has stayed around in one or another form is the term architecture and the architect role. Of course, there are plenty of overloads for the term and plenty of architect archetype like domain architect, enterprise architects, IT architect, network architect, software architect and you name it. Wikipedia has a good definition of software architecture that I quote below: Software architecture refers to the fundamental structures of a software system and the discipline of creating such structures and systems. Each structure comprises software elements, relations among them, and properties of both elements and relations. The architecture of a software system is a metaphor, analogous to the architecture of a building. It functions as a blueprint for the system and the developing project, laying out the tasks necessary to be executed by the design teams. Software, data, IT, domain, and enterprise are going to have an architecture no matter if it is intentional, developed and nurtured and well documented. Or something that is grown out of what everyone involved in the system has done to arrive to without a record of why the architecture is what it is. Below I write about how and why documenting software architecture is not as successful as it should be and how can it possibly be improved. AD and ADR During the blog I refer to Architecture description as AD and Architecture Decision Record as ADR. I see adding the ADR as an ongoing effort while the AD is the overall architectural view of the system. The AD has higher level of abstraction compared to the ADRs which are focused for a particular decision. ","date":"2022-04-19","objectID":"/2022/04/few-tips-for-more-success-with-architecture-description/:1:0","tags":["Architecture","Documentation"],"title":"Few tips for more success with architecture description","uri":"/2022/04/few-tips-for-more-success-with-architecture-description/"},{"categories":["Architecture"],"content":"Software architecture description infamy The primary reasons for the infamy of software architecture description, as far as I can say, is the failure in attracting different stakeholders to read or to develop architecture descriptions. There are plenty of archetypes of architectural descriptions targeting different groups of stakeholders. Here I will put the focus on the software architecture with the target audience being software engineers. Some reasons for architecture description usually is not the favorite topic of conversation are the followings: The architecture description is too generic and is not created for software developers consumption. The vocabulary is wrong, the addressed concerns may not be relevant and so on. It has too much irrelevant information that the software developers may not need. So the noise to signal ratio is too high for the document to be considered. The architecture description is not easy to access, and if it is; it is not easily readable because of the tooling that is used to create it. No uniform theme is used. Different architecture description within the same organisation are not following the same theme. The description is not up to date From the list above “keep it up to date” might be hard to imagine and the “theme” item may not be clear. So I will go into a bit of details for each. Keep architecture description up to date Keeping documentation up to date is hard, we all know it. And there are many advice on how to approach this. Some of these advice are applicable to any documentation. Keep the documentation short: Write as little and as targeted as possible. Avoid fluff, avoid write one document for all stakeholders approach. Have a responsible person: Each ADR and the AD itself should be owned by someone who is the sole responsible to keep track of and update them. If everyone is responsible nobody is. Make updating easy and streamlined: Keep the AD and ADR in the code repo, where the devs like to spend their time in. Make it easy to contribute to the AD/R: Anyone in the team/s should be able to open a PR or contribute to clarifying the AD/R Establish a uniform theme I know almost no software developer without a very carefully selected theme for the editors, terminal and IDE. So I’d expect the same emphasis of look and feel would apply on the documentation as well. When I say theme I am referring to the following aspects of the architecture documentation: Terminology: Refer to any one concept/artefact/etc. with one term throughout the org Framework: Use the same architecture model framework, if it is C4 Model or 4+1 Model or anything else, stay with the same model everywhere Tooling: There are 100s of diagraming tools, pick one and stay with it. The lighter it is the better chance of it being used. Stay away from heavy tools for day to day work. Choose a tool that works on all operating systems used in the organisation Common icons/glyphs: Develop common icons and glyphs for internal architectural concepts and artefacts; use standard icons, e.g. cloud vendor provided icons, or framework/tools provided icons and glyphs Use a standarar template: At application server organisation we had a architecture committee (AsArch) which had a OnePager template for architectural decisions/changes that needed to review. Everyone in the committee or any attendees knew what to expect to see in the architecture description. For each of the above line items I can write down a long blog post. But let me talk a little bit about the template as the container for rest of the items (a glyph, a diagram, a term or expression wont be used without it appearing on a page) ","date":"2022-04-19","objectID":"/2022/04/few-tips-for-more-success-with-architecture-description/:1:1","tags":["Architecture","Documentation"],"title":"Few tips for more success with architecture description","uri":"/2022/04/few-tips-for-more-success-with-architecture-description/"},{"categories":["Architecture"],"content":"Software architecture descriptor template Templates have poor reputation as anyone in larger enterprises associate them with a long document with unfamiliar terminology and vague questions. The architecture description OnePager template should not endup being vague or filled with questions. It is a description not a checklist, not a questionnaire. What about ADRs? One thing to mention before I go far with describing a template, I can say that template is not a farfetched concept when using ADRs. The ADRs follow a template, for example it can contain headers for context, assumptions, decision, consequences and status and the content for each header. I see ADR mostly suitable to document the on-going decisions. Such decisions, if they impact the bigger picture must result in an update in the one page. Think about the OnePager as a summary of all the ADRs. Usual heading in ADRs Some of the most common headings in an ADR are the following: Tittle: What is it that this decision talksa about Date: When was this decision made Context/Summary: Problem definition and solution context. This is setting the scene for rest of the description/decision to come Decision: What is decided in relation to the issue/context/question Status: proposed | rejected | accepted | deprecated |… Consequences: What changes in the system (Performance, testability, cohesion, isolation, etc.), what turn more complicated or easier. You may also see the following headings being mentioned: More heading in ADRs Deciders Assumptions Constraint Related Decisions But generally speaking, the template is a set of common sense headings encapsulating the discussion that has happened over a coffee, over an email, in a meeting, etc. in an easy to follow structure. The OnePager as a story Now, down to a OnePager. What I appreciated about the OnePager that we had was the clear headings and subheadings. There was no confusion about what is needed to be mentioned and in what order. Of course not all headers were necessary to have any content or to be present, but their presense in the OnePager was a guide so that the authors do not forget about adding some details. For example, if there was something to mention in relation to performance impact it would go under “Performance impacts” header. If there was an impact on the system security it would go under the security headring and so on. Reading one pager should feel like reading a story, same as reading a well written code imho, starting with an author and an overview, what is involved in the system and what is not (the scope) and down to details. It must be open to everyone in the organisation, anyone should be able to easily find it, read it, comment on it and could reach out to the author/s for any clarification. The OnePager, at any point in time, must reflect the current state of the approach taken to build the system. Depending on the scope and size of the system the architecture description may have a single a very high level representation of the system components or a more detailed approach. For a significant enough s system there wont be more than Context diagrams (if we assume C4 Model). For example mentioning the presence of a pipeline to deliver the code to a target deployment environment can be a component in the context and described in a single paragraph. Later on each of these high level components of the architecture will have their own OnePager going into the details. ","date":"2022-04-19","objectID":"/2022/04/few-tips-for-more-success-with-architecture-description/:1:2","tags":["Architecture","Documentation"],"title":"Few tips for more success with architecture description","uri":"/2022/04/few-tips-for-more-success-with-architecture-description/"},{"categories":["Architecture"],"content":"Conclusion Write less Write where it can be accessed and changed. Stay consistent through the organisation Dont write a single document for all the role; write targeted documents for different roles Have clear ownership for the description ","date":"2022-04-19","objectID":"/2022/04/few-tips-for-more-success-with-architecture-description/:2:0","tags":["Architecture","Documentation"],"title":"Few tips for more success with architecture description","uri":"/2022/04/few-tips-for-more-success-with-architecture-description/"},{"categories":null,"content":"I work in software industry; and have been involved with software development since 2000. Delphi, .Net and J2SE back in the time, and now I am more focused on Java and CNCF ecosystems. My responsiblities are more in ensuring alignments, and with assisting organizations with tech strategy, architecture, adoption of new technologies and practices, planning and implementations when the area of impact is across organization boundaries. I like the thrill of innovating, building or rebuilding. I enjoy it because it is as giving existence to something that is not; being software engineering or small tinkering projects. I like outdoors, mountains, open land, I like water sports; and the prime of my activities is running, mountain running that is (I am not good at it). I like writing, authored a book and co-authored another a decade ago. Whenever I get the chance I read books ranging from sci-fi and fantasy to leadership and management; every now and then I binge a bunch of articles or blogs that I have bookmarked to go through. Recently I revived this blog (Removed about 110 posts that were outdated) to start writing again How to get in touch with me? If you wanted to talk to me about any of the blog post, or anything else for that matter, send me an email to my first name at kalali.blog. ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"About me, Masoud Kalali","uri":"/about/"},{"categories":["Product Adoption"],"content":"Amount of information about how a new component or software system can solve all the problem in a specific area is sometimes overboard. The hotter the topic or the framework the more information is scattered around the web for it.","date":"2022-04-05","objectID":"/2022/04/impacts-of-a-few-in-depth-write-ups-and-an-abundance-of-getting-started/","tags":["Vendor","Case Study"],"title":"Impacts of a few in-depth write-ups and an abundance of getting started","uri":"/2022/04/impacts-of-a-few-in-depth-write-ups-and-an-abundance-of-getting-started/"},{"categories":["Product Adoption"],"content":"Amount of information about how a new component or software system can solve all the problem in a specific area is sometimes overboard. The hotter the topic or the framework the more information is scattered around the web for it. For example: Have you seen the plenty of use cases that every vendor in every segment of tech stack provide as part of the adoption or success story? How about the tutorial that shows how quickly and easily something as significant as a an observability solution can be set and be up and running? And many other medium that one way or another demo how easily a solution can be used/adopted. Existence of such case studies and tutorial is amazing contribution to the overall wealth of knowledge and understanding in the tech sphere, no doubt avbout it. Sometimes I see engineering team members speaking about adopting a new infrastructure component or a brand new CNCF project with estimations that are 1/20st of the realistic time that it would take to adopt such a solution into our infrastructure. Any of those can be an entry point for a team or organisation deciding to adopt something and then endup in the pink elephant. With the adoption takes longer and longer and at the end of the day the organisation endups with half baked integrations and a team or an individual who is in charge of maintaining something that is not ready for prime time but is in widespread use. If vendors and contributors that are writing quick tutorial can be more straight forward with the write-ups in relation to things like compliance, governance, automation, seamless integration, security, etc. that an organisation must take into account before thinking about adopting project/product XYZ. Over short term there might be fewer attempt at adopting new components, products and projects but in the long run there will be more success in the industry which hopefully make everyone happier. Consumer of tech products will be happier with bug free, and less breaches in the product they are using and the practitioners will be happier with better build and well thought IT ecosystem. On the other end of it, it may result in less experiments and thus less feedback to the product owners on how to improve or enhance different aspect of the product. From the rollout to the usability of it, it is a trade-off and a balance for sure. ","date":"2022-04-05","objectID":"/2022/04/impacts-of-a-few-in-depth-write-ups-and-an-abundance-of-getting-started/:0:0","tags":["Vendor","Case Study"],"title":"Impacts of a few in-depth write-ups and an abundance of getting started","uri":"/2022/04/impacts-of-a-few-in-depth-write-ups-and-an-abundance-of-getting-started/"},{"categories":["Platform Engineering"],"content":"Building a new development platform, for example a new microservices oriented platform to replace an existing monolith software system, is a massive endeavour. I have been working on a development platform, the whole ecosystem from ways of working to pipeline in the past 3 years and the experience might help others. So I thought to write down some of the observation and experience before they fully turn into intrinsic/implicit knowledge and hard to pen. ","date":"2022-03-22","objectID":"/2022/03/effective-internal-platform-product-manager/","tags":["product owner","PM","platform engineering","microservices"],"title":"Building a development platform","uri":"/2022/03/effective-internal-platform-product-manager/"},{"categories":["Platform Engineering"],"content":"Intro Building a new development platform, for example a new microservices oriented platform to replace an existing monolith software system, is a massive endeavour. I have been working on a development platform, the whole ecosystem from ways of working to pipeline in the past 3 years and the experience might help others. So I thought to write down some of the observation and experience before they fully turn into intrinsic/implicit knowledge and hard to pen. Platform? If we divide the software development within an organization into two very broad categories, there is platform development, and platform products in one layer and and application development in another, which is usually consumes the platform. The applications are usually customer/end-user facing or directly facilitating a particular business use-case, for example a login routine or a batch job that runs every night to process schedule payments. Applications most often have a clear business goal and defining OKRs is easier and ROI can be observed within a shorter period of time. On the other hand, platform development which can be anything from shared components for different applications to release pipelines, development tools, or combination of many things together is not as straight forward. Platforms and platform teams are there to not only save initial cost of starting a new project or product but to save on the cost of maintenance and owning such product but introducing familiar concepts and ways of working across the vertical and horizontal integration points. Sometimes a platform/team is hard to justify, not easy to have any meaningful OKRs and usually have no immediate ROI. For example, If the platform team develops a pipeline and related libraries, the adoption of such pipeline takes time. After a reasonable number of applications have started using the said pipeline, product owner would slowly see an indirect ROI from: Better compliance baked into the pipeline Automation in release practices rather than throw over the wall and hand overs Uniform quality gates as pipeline would enforce some level conde analysis and apply some gates Faster time to production as it reduces the number of manual steps and communication costs Less code sediment as continues or even frequent deployment reduces the code that is sitting in the codebase without being exercised Less regressions because of frequent small releases etc. That is when the justification for existence of a platform become easier and the platform teams and products will become necessities. Why Platforms? Simply put platforms help with the following: Time saving as they prevent inventing the same thing again and again; e.g. a pipeline. Time saving as, when done right, they introduce a consistent way of working across diferent layers. Being applications, infrastructure or tooling. That will in turn makes transfer of knowledge and understanding easier Time saving as teams with expertise build re-usable components that other team can incorporate rather than every time having to acquire such expertise Governance, and compliance and other orthogonal aspects can be addressed via automation backing variety of self services. Let’s say that there an enterprise with the very well established process for software development, delivery, operation and support. This has been the case for the past couple of decades and individuals, teams, organisational units, and organisation as a whole developed a culture around the development process (for good or bad). The process can be something along the line of the following for simple features/functionalities. Imagine a handover between most steps. Long contemplations and many meetings of the domain architect/s Retirement gathering and certifying it with stakeholders Doing any risk assessment, compliance check in relation to data being processed and/or collected Planning (usually includes capacity planning and schedule as well as development timeline) Development and figuring o","date":"2022-03-22","objectID":"/2022/03/effective-internal-platform-product-manager/:0:0","tags":["product owner","PM","platform engineering","microservices"],"title":"Building a development platform","uri":"/2022/03/effective-internal-platform-product-manager/"},{"categories":["Platform Engineering"],"content":"Setting up the expectations Being a product owner or an advocate for a platform requires more conversation and investigation about painpoints existing in the organization as a whole. Being the application/program development teams or the relationship between compliance/security/process divisions with the application development hierarchy. Setting clear expectations for external customers and goals for the platform team itself is an important task that the product owner, in combination with engineering teams (and management) should set. This expectation setting will make it clear to management on what timeline and outcome to expect for given organisational support, runway and budget. At the same time, a platform development team must make it clear to the management that having a platform is a tradeoff. For example if the current way of working is that each team entirely choose their guidelines and architectural patterns, a development platform may enforce certain principles and guidelines using automation as much as possible, so no exception and exemptions. An example can be use of certain libraries for logging, or certain pipeline for deployment, certain number of active engineers per application and so on. Platform adoption A development platform like any other product will need adoption and use to get the feedback cycle going. Let’s say that the platform teams understood the painpoints and the platform is developed to not only remedy the painpoints but also ensure the viability of the application ecosystem over the next decad. If the platform is not being used and has an established feedback cycle it will be hard for it to grow and cover the majority of use-cases or valid viewpoints. There are some general approach in spreading the adoption of the platform and starting a feedback cycle. Platform team owning applications One approach that I have employed, and seems to work for adoption of the platform, is ensuring the platform team owns some programs built on top of the platform. This service can be the example to showcase how platform works and how does it help with the pain-points that it exists to remedy and how does it propel the organisation into the new ways of working and tech landscape. Of course, platform owners developing applications has some drawbacks: The application/s may turn into a an unintended blueprint and others may follow something that is not fully baked yet. The platform team too far get into habit of optimising the platform for their own use/level of competence. The platform team get too far distracted by the application to pay attention to the platform itself. This may result in mental overload for the team and far too many context switching. Platform team helping an application team convert Another approach is locating a team that struggling the most and is vocal the most about the painpoints, of course within reason, and help them convert their service development to use the new platform. This would require multiple criteria: The service in question does not have too many dependencies that can impact the conversion The service team is willing to take the steps. The steps that the platform is advocating for. For example code review, use of pipeline, test automation and so on that is a service provided by the platform. The platform team has some understanding of the domain that the service team is driving. Combination of the above two One thing to consider in the combination or even in the second approach is to identify the players and influencers and get buy-in from them. In every organisation there are people who are sitting far behind the scene without any title with more influence on what different teams may adopt that any line managers. Convincing them will multiply the rate of adoption. Next In the next instalments of this series I will write more about each aspect of the development platform mentioned here. ","date":"2022-03-22","objectID":"/2022/03/effective-internal-platform-product-manager/:0:1","tags":["product owner","PM","platform engineering","microservices"],"title":"Building a development platform","uri":"/2022/03/effective-internal-platform-product-manager/"}]